/*
-----------------------------------------------------
StatsStructGen.py 1.1

This file was autogenerated with run cmd:
  "gen_scripts/StatsStructGen.py --packagename=org.frc836.database --classname=PitStats --tablename=scout_pit_data_2019 --infile=FRC_Scouting_Server/scouting.sql --outfile=app/src/main/java/org/frc836/database/PitStats.java"

python version info:
  3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20:52) [MSC v.1916 32 bit (Intel)]

Please take heed of modifying unnecessarily
-----------------------------------------------------
*/

package org.frc836.database;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import org.frc836.database.FRCScoutingContract.SCOUT_PIT_DATA_2019_Entry;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.Date;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

public class PitStats {


	public int team_id;
	public int start_hab_level;
	public boolean preload_cargo;
	public boolean preload_hatch;
	public boolean sandstorm_bonus;
	public boolean sandstorm_hatch_ship_front;
	public boolean sandstorm_hatch_ship_side;
	public boolean sandstorm_hatch_rocket_1;
	public boolean sandstorm_hatch_rocket_2;
	public boolean sandstorm_hatch_rocket_3;
	public boolean sandstorm_cargo_ship;
	public boolean sandstorm_cargo_rocket_1;
	public boolean sandstorm_cargo_rocket_2;
	public boolean sandstorm_cargo_rocket_3;
	public int sandstorm_hatch_count;
	public int sandstorm_cargo_count;
	public boolean hatch_1;
	public boolean hatch_2;
	public boolean hatch_3;
	public boolean cargo_1;
	public boolean cargo_2;
	public boolean cargo_3;
	public boolean hab_climb_2;
	public boolean hab_climb_3;
	public int hab_climb_speed_lvl_2_sec;
	public int hab_climb_speed_lvl_3_sec;
	public boolean floor_pickup_hatch;
	public boolean floor_pickup_cargo;
	public int max_robot_speed_fts;
	public int robot_gross_weight_lbs;
	public String config_id;
	public String wheel_base_id;
	public String wheel_type_id;
	public String notes;
	

	public static final String TABLE_NAME = SCOUT_PIT_DATA_2019_Entry.TABLE_NAME;
	public static final String COLUMN_NAME_ID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_ID;
	public static final String COLUMN_NAME_TEAM_ID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_TEAM_ID;
	public static final String COLUMN_NAME_START_HAB_LEVEL = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_START_HAB_LEVEL;
	public static final String COLUMN_NAME_PRELOAD_CARGO = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_PRELOAD_CARGO;
	public static final String COLUMN_NAME_PRELOAD_HATCH = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_PRELOAD_HATCH;
	public static final String COLUMN_NAME_SANDSTORM_BONUS = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_BONUS;
	public static final String COLUMN_NAME_SANDSTORM_HATCH_SHIP_FRONT = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_HATCH_SHIP_FRONT;
	public static final String COLUMN_NAME_SANDSTORM_HATCH_SHIP_SIDE = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_HATCH_SHIP_SIDE;
	public static final String COLUMN_NAME_SANDSTORM_HATCH_ROCKET_1 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_HATCH_ROCKET_1;
	public static final String COLUMN_NAME_SANDSTORM_HATCH_ROCKET_2 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_HATCH_ROCKET_2;
	public static final String COLUMN_NAME_SANDSTORM_HATCH_ROCKET_3 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_HATCH_ROCKET_3;
	public static final String COLUMN_NAME_SANDSTORM_CARGO_SHIP = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_CARGO_SHIP;
	public static final String COLUMN_NAME_SANDSTORM_CARGO_ROCKET_1 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_CARGO_ROCKET_1;
	public static final String COLUMN_NAME_SANDSTORM_CARGO_ROCKET_2 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_CARGO_ROCKET_2;
	public static final String COLUMN_NAME_SANDSTORM_CARGO_ROCKET_3 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_CARGO_ROCKET_3;
	public static final String COLUMN_NAME_SANDSTORM_HATCH_COUNT = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_HATCH_COUNT;
	public static final String COLUMN_NAME_SANDSTORM_CARGO_COUNT = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SANDSTORM_CARGO_COUNT;
	public static final String COLUMN_NAME_HATCH_1 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_HATCH_1;
	public static final String COLUMN_NAME_HATCH_2 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_HATCH_2;
	public static final String COLUMN_NAME_HATCH_3 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_HATCH_3;
	public static final String COLUMN_NAME_CARGO_1 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_CARGO_1;
	public static final String COLUMN_NAME_CARGO_2 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_CARGO_2;
	public static final String COLUMN_NAME_CARGO_3 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_CARGO_3;
	public static final String COLUMN_NAME_HAB_CLIMB_2 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_HAB_CLIMB_2;
	public static final String COLUMN_NAME_HAB_CLIMB_3 = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_HAB_CLIMB_3;
	public static final String COLUMN_NAME_HAB_CLIMB_SPEED_LVL_2_SEC = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_HAB_CLIMB_SPEED_LVL_2_SEC;
	public static final String COLUMN_NAME_HAB_CLIMB_SPEED_LVL_3_SEC = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_HAB_CLIMB_SPEED_LVL_3_SEC;
	public static final String COLUMN_NAME_FLOOR_PICKUP_HATCH = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_FLOOR_PICKUP_HATCH;
	public static final String COLUMN_NAME_FLOOR_PICKUP_CARGO = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_FLOOR_PICKUP_CARGO;
	public static final String COLUMN_NAME_MAX_ROBOT_SPEED_FTS = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_MAX_ROBOT_SPEED_FTS;
	public static final String COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS;
	public static final String COLUMN_NAME_CONFIG_ID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_CONFIG_ID;
	public static final String COLUMN_NAME_WHEEL_BASE_ID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_WHEEL_BASE_ID;
	public static final String COLUMN_NAME_WHEEL_TYPE_ID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_WHEEL_TYPE_ID;
	public static final String COLUMN_NAME_NOTES = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_NOTES;
	public static final String COLUMN_NAME_INVALID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_INVALID;
	public static final String COLUMN_NAME_TIMESTAMP = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_TIMESTAMP;
	

	public PitStats() {
		init();
	}
	
	public void init() {
		team_id = 0;
		start_hab_level = 0;
		preload_cargo = false;
		preload_hatch = false;
		sandstorm_bonus = false;
		sandstorm_hatch_ship_front = false;
		sandstorm_hatch_ship_side = false;
		sandstorm_hatch_rocket_1 = false;
		sandstorm_hatch_rocket_2 = false;
		sandstorm_hatch_rocket_3 = false;
		sandstorm_cargo_ship = false;
		sandstorm_cargo_rocket_1 = false;
		sandstorm_cargo_rocket_2 = false;
		sandstorm_cargo_rocket_3 = false;
		sandstorm_hatch_count = 0;
		sandstorm_cargo_count = 0;
		hatch_1 = false;
		hatch_2 = false;
		hatch_3 = false;
		cargo_1 = false;
		cargo_2 = false;
		cargo_3 = false;
		hab_climb_2 = false;
		hab_climb_3 = false;
		hab_climb_speed_lvl_2_sec = 0;
		hab_climb_speed_lvl_3_sec = 0;
		floor_pickup_hatch = false;
		floor_pickup_cargo = false;
		max_robot_speed_fts = 0;
		robot_gross_weight_lbs = 0;
		config_id = "other";
		wheel_base_id = "other";
		wheel_type_id = "other";
		notes = "";
	}
	

	public ContentValues getValues(DB db, SQLiteDatabase database) {
		ContentValues vals = new ContentValues();
		vals.put(COLUMN_NAME_ID, team_id * team_id);
		vals.put(COLUMN_NAME_TEAM_ID, team_id);
		vals.put(COLUMN_NAME_START_HAB_LEVEL, start_hab_level);
		vals.put(COLUMN_NAME_PRELOAD_CARGO, preload_cargo ? 1 : 0);
		vals.put(COLUMN_NAME_PRELOAD_HATCH, preload_hatch ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_BONUS, sandstorm_bonus ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_SHIP_FRONT, sandstorm_hatch_ship_front ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_SHIP_SIDE, sandstorm_hatch_ship_side ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_1, sandstorm_hatch_rocket_1 ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_2, sandstorm_hatch_rocket_2 ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_3, sandstorm_hatch_rocket_3 ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_CARGO_SHIP, sandstorm_cargo_ship ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_1, sandstorm_cargo_rocket_1 ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_2, sandstorm_cargo_rocket_2 ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_3, sandstorm_cargo_rocket_3 ? 1 : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_COUNT, sandstorm_hatch_count);
		vals.put(COLUMN_NAME_SANDSTORM_CARGO_COUNT, sandstorm_cargo_count);
		vals.put(COLUMN_NAME_HATCH_1, hatch_1 ? 1 : 0);
		vals.put(COLUMN_NAME_HATCH_2, hatch_2 ? 1 : 0);
		vals.put(COLUMN_NAME_HATCH_3, hatch_3 ? 1 : 0);
		vals.put(COLUMN_NAME_CARGO_1, cargo_1 ? 1 : 0);
		vals.put(COLUMN_NAME_CARGO_2, cargo_2 ? 1 : 0);
		vals.put(COLUMN_NAME_CARGO_3, cargo_3 ? 1 : 0);
		vals.put(COLUMN_NAME_HAB_CLIMB_2, hab_climb_2 ? 1 : 0);
		vals.put(COLUMN_NAME_HAB_CLIMB_3, hab_climb_3 ? 1 : 0);
		vals.put(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_2_SEC, hab_climb_speed_lvl_2_sec);
		vals.put(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_3_SEC, hab_climb_speed_lvl_3_sec);
		vals.put(COLUMN_NAME_FLOOR_PICKUP_HATCH, floor_pickup_hatch ? 1 : 0);
		vals.put(COLUMN_NAME_FLOOR_PICKUP_CARGO, floor_pickup_cargo ? 1 : 0);
		vals.put(COLUMN_NAME_MAX_ROBOT_SPEED_FTS, max_robot_speed_fts);
		vals.put(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS, robot_gross_weight_lbs);
		vals.put(COLUMN_NAME_CONFIG_ID, db.getConfigIDFromName(config_id, database));
		vals.put(COLUMN_NAME_WHEEL_BASE_ID, db.getWheelBaseIDFromName(wheel_base_id, database));
		vals.put(COLUMN_NAME_WHEEL_TYPE_ID, db.getWheelTypeIDFromName(wheel_type_id, database));
		vals.put(COLUMN_NAME_NOTES, notes);
		vals.put(COLUMN_NAME_INVALID, 1);
	
		return vals;
	}

	public void fromCursor(Cursor c, DB db, SQLiteDatabase database) {
		fromCursor(c, db, database, 0);
	}
	
	public void fromCursor(Cursor c, DB db, SQLiteDatabase database, int pos) {
		c.moveToPosition(pos);
		team_id = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_TEAM_ID));
		start_hab_level = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_START_HAB_LEVEL));
		preload_cargo = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_PRELOAD_CARGO)) != 0;
		preload_hatch = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_PRELOAD_HATCH)) != 0;
		sandstorm_bonus = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_BONUS)) != 0;
		sandstorm_hatch_ship_front = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_HATCH_SHIP_FRONT)) != 0;
		sandstorm_hatch_ship_side = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_HATCH_SHIP_SIDE)) != 0;
		sandstorm_hatch_rocket_1 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_1)) != 0;
		sandstorm_hatch_rocket_2 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_2)) != 0;
		sandstorm_hatch_rocket_3 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_3)) != 0;
		sandstorm_cargo_ship = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_CARGO_SHIP)) != 0;
		sandstorm_cargo_rocket_1 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_1)) != 0;
		sandstorm_cargo_rocket_2 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_2)) != 0;
		sandstorm_cargo_rocket_3 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_3)) != 0;
		sandstorm_hatch_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_HATCH_COUNT));
		sandstorm_cargo_count = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SANDSTORM_CARGO_COUNT));
		hatch_1 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HATCH_1)) != 0;
		hatch_2 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HATCH_2)) != 0;
		hatch_3 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HATCH_3)) != 0;
		cargo_1 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_CARGO_1)) != 0;
		cargo_2 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_CARGO_2)) != 0;
		cargo_3 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_CARGO_3)) != 0;
		hab_climb_2 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HAB_CLIMB_2)) != 0;
		hab_climb_3 = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HAB_CLIMB_3)) != 0;
		hab_climb_speed_lvl_2_sec = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_2_SEC));
		hab_climb_speed_lvl_3_sec = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_3_SEC));
		floor_pickup_hatch = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_FLOOR_PICKUP_HATCH)) != 0;
		floor_pickup_cargo = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_FLOOR_PICKUP_CARGO)) != 0;
		max_robot_speed_fts = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_MAX_ROBOT_SPEED_FTS));
		robot_gross_weight_lbs = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS));
		config_id = DB.getConfigNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_CONFIG_ID)), database);
		wheel_base_id = DB.getWheelBaseNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_WHEEL_BASE_ID)), database);
		wheel_type_id = DB.getWheelTypeNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_WHEEL_TYPE_ID)), database);
		notes = c.getString(c.getColumnIndexOrThrow(COLUMN_NAME_NOTES));
	}

	public String[] getProjection() {
		List<String> temp = new ArrayList<String>(34);
		temp.add(COLUMN_NAME_TEAM_ID);
		temp.add(COLUMN_NAME_START_HAB_LEVEL);
		temp.add(COLUMN_NAME_PRELOAD_CARGO);
		temp.add(COLUMN_NAME_PRELOAD_HATCH);
		temp.add(COLUMN_NAME_SANDSTORM_BONUS);
		temp.add(COLUMN_NAME_SANDSTORM_HATCH_SHIP_FRONT);
		temp.add(COLUMN_NAME_SANDSTORM_HATCH_SHIP_SIDE);
		temp.add(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_1);
		temp.add(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_2);
		temp.add(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_3);
		temp.add(COLUMN_NAME_SANDSTORM_CARGO_SHIP);
		temp.add(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_1);
		temp.add(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_2);
		temp.add(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_3);
		temp.add(COLUMN_NAME_SANDSTORM_HATCH_COUNT);
		temp.add(COLUMN_NAME_SANDSTORM_CARGO_COUNT);
		temp.add(COLUMN_NAME_HATCH_1);
		temp.add(COLUMN_NAME_HATCH_2);
		temp.add(COLUMN_NAME_HATCH_3);
		temp.add(COLUMN_NAME_CARGO_1);
		temp.add(COLUMN_NAME_CARGO_2);
		temp.add(COLUMN_NAME_CARGO_3);
		temp.add(COLUMN_NAME_HAB_CLIMB_2);
		temp.add(COLUMN_NAME_HAB_CLIMB_3);
		temp.add(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_2_SEC);
		temp.add(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_3_SEC);
		temp.add(COLUMN_NAME_FLOOR_PICKUP_HATCH);
		temp.add(COLUMN_NAME_FLOOR_PICKUP_CARGO);
		temp.add(COLUMN_NAME_MAX_ROBOT_SPEED_FTS);
		temp.add(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS);
		temp.add(COLUMN_NAME_CONFIG_ID);
		temp.add(COLUMN_NAME_WHEEL_BASE_ID);
		temp.add(COLUMN_NAME_WHEEL_TYPE_ID);
		temp.add(COLUMN_NAME_NOTES);
		String[] projection = new String[temp.size()];
		return temp.toArray(projection);
	}

	public boolean isTextField(String column_name) {
		if (COLUMN_NAME_NOTES.equalsIgnoreCase(column_name)) return true;
	
		return false;
	}

	public boolean needsConvertedToText(String column_name) {
		if (COLUMN_NAME_CONFIG_ID.equalsIgnoreCase(column_name)) return true;
	
		if (COLUMN_NAME_WHEEL_BASE_ID.equalsIgnoreCase(column_name)) return true;
	
		if (COLUMN_NAME_WHEEL_TYPE_ID.equalsIgnoreCase(column_name)) return true;
	
		return false;
	}

	public ContentValues jsonToCV(JSONObject json) throws JSONException {
		ContentValues vals = new ContentValues();
		vals.put(COLUMN_NAME_ID, json.has(COLUMN_NAME_ID) ? json.getInt(COLUMN_NAME_ID) : 0);
		vals.put(COLUMN_NAME_TEAM_ID, json.has(COLUMN_NAME_TEAM_ID) ? json.getInt(COLUMN_NAME_TEAM_ID) : 0);
		vals.put(COLUMN_NAME_START_HAB_LEVEL, json.has(COLUMN_NAME_START_HAB_LEVEL) ? json.getInt(COLUMN_NAME_START_HAB_LEVEL) : 0);
		vals.put(COLUMN_NAME_PRELOAD_CARGO, json.has(COLUMN_NAME_PRELOAD_CARGO) ? json.getInt(COLUMN_NAME_PRELOAD_CARGO) : 0);
		vals.put(COLUMN_NAME_PRELOAD_HATCH, json.has(COLUMN_NAME_PRELOAD_HATCH) ? json.getInt(COLUMN_NAME_PRELOAD_HATCH) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_BONUS, json.has(COLUMN_NAME_SANDSTORM_BONUS) ? json.getInt(COLUMN_NAME_SANDSTORM_BONUS) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_SHIP_FRONT, json.has(COLUMN_NAME_SANDSTORM_HATCH_SHIP_FRONT) ? json.getInt(COLUMN_NAME_SANDSTORM_HATCH_SHIP_FRONT) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_SHIP_SIDE, json.has(COLUMN_NAME_SANDSTORM_HATCH_SHIP_SIDE) ? json.getInt(COLUMN_NAME_SANDSTORM_HATCH_SHIP_SIDE) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_1, json.has(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_1) ? json.getInt(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_1) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_2, json.has(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_2) ? json.getInt(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_2) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_3, json.has(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_3) ? json.getInt(COLUMN_NAME_SANDSTORM_HATCH_ROCKET_3) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_CARGO_SHIP, json.has(COLUMN_NAME_SANDSTORM_CARGO_SHIP) ? json.getInt(COLUMN_NAME_SANDSTORM_CARGO_SHIP) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_1, json.has(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_1) ? json.getInt(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_1) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_2, json.has(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_2) ? json.getInt(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_2) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_3, json.has(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_3) ? json.getInt(COLUMN_NAME_SANDSTORM_CARGO_ROCKET_3) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_HATCH_COUNT, json.has(COLUMN_NAME_SANDSTORM_HATCH_COUNT) ? json.getInt(COLUMN_NAME_SANDSTORM_HATCH_COUNT) : 0);
		vals.put(COLUMN_NAME_SANDSTORM_CARGO_COUNT, json.has(COLUMN_NAME_SANDSTORM_CARGO_COUNT) ? json.getInt(COLUMN_NAME_SANDSTORM_CARGO_COUNT) : 0);
		vals.put(COLUMN_NAME_HATCH_1, json.has(COLUMN_NAME_HATCH_1) ? json.getInt(COLUMN_NAME_HATCH_1) : 0);
		vals.put(COLUMN_NAME_HATCH_2, json.has(COLUMN_NAME_HATCH_2) ? json.getInt(COLUMN_NAME_HATCH_2) : 0);
		vals.put(COLUMN_NAME_HATCH_3, json.has(COLUMN_NAME_HATCH_3) ? json.getInt(COLUMN_NAME_HATCH_3) : 0);
		vals.put(COLUMN_NAME_CARGO_1, json.has(COLUMN_NAME_CARGO_1) ? json.getInt(COLUMN_NAME_CARGO_1) : 0);
		vals.put(COLUMN_NAME_CARGO_2, json.has(COLUMN_NAME_CARGO_2) ? json.getInt(COLUMN_NAME_CARGO_2) : 0);
		vals.put(COLUMN_NAME_CARGO_3, json.has(COLUMN_NAME_CARGO_3) ? json.getInt(COLUMN_NAME_CARGO_3) : 0);
		vals.put(COLUMN_NAME_HAB_CLIMB_2, json.has(COLUMN_NAME_HAB_CLIMB_2) ? json.getInt(COLUMN_NAME_HAB_CLIMB_2) : 0);
		vals.put(COLUMN_NAME_HAB_CLIMB_3, json.has(COLUMN_NAME_HAB_CLIMB_3) ? json.getInt(COLUMN_NAME_HAB_CLIMB_3) : 0);
		vals.put(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_2_SEC, json.has(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_2_SEC) ? json.getInt(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_2_SEC) : 0);
		vals.put(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_3_SEC, json.has(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_3_SEC) ? json.getInt(COLUMN_NAME_HAB_CLIMB_SPEED_LVL_3_SEC) : 0);
		vals.put(COLUMN_NAME_FLOOR_PICKUP_HATCH, json.has(COLUMN_NAME_FLOOR_PICKUP_HATCH) ? json.getInt(COLUMN_NAME_FLOOR_PICKUP_HATCH) : 0);
		vals.put(COLUMN_NAME_FLOOR_PICKUP_CARGO, json.has(COLUMN_NAME_FLOOR_PICKUP_CARGO) ? json.getInt(COLUMN_NAME_FLOOR_PICKUP_CARGO) : 0);
		vals.put(COLUMN_NAME_MAX_ROBOT_SPEED_FTS, json.has(COLUMN_NAME_MAX_ROBOT_SPEED_FTS) ? json.getInt(COLUMN_NAME_MAX_ROBOT_SPEED_FTS) : 0);
		vals.put(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS, json.has(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS) ? json.getInt(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS) : 0);
		vals.put(COLUMN_NAME_CONFIG_ID, json.has(COLUMN_NAME_CONFIG_ID) ? json.getInt(COLUMN_NAME_CONFIG_ID) : 0);
		vals.put(COLUMN_NAME_WHEEL_BASE_ID, json.has(COLUMN_NAME_WHEEL_BASE_ID) ? json.getInt(COLUMN_NAME_WHEEL_BASE_ID) : 0);
		vals.put(COLUMN_NAME_WHEEL_TYPE_ID, json.has(COLUMN_NAME_WHEEL_TYPE_ID) ? json.getInt(COLUMN_NAME_WHEEL_TYPE_ID) : 0);
		vals.put(COLUMN_NAME_NOTES, json.has(COLUMN_NAME_NOTES) ? json.getString(COLUMN_NAME_NOTES) : "");
		vals.put(COLUMN_NAME_INVALID, 0);
		vals.put(COLUMN_NAME_TIMESTAMP, DB.dateParser.format(new Date(json.getLong(COLUMN_NAME_TIMESTAMP) * 1000)));
		return vals;
	}

	public LinkedHashMap<String,String> getDisplayData() {
		LinkedHashMap<String,String> vals = new LinkedHashMap<String,String>();
		vals.put( COLUMN_NAME_TEAM_ID, String.valueOf(team_id));
		vals.put( COLUMN_NAME_START_HAB_LEVEL, String.valueOf(start_hab_level));
		vals.put( COLUMN_NAME_PRELOAD_CARGO, String.valueOf(preload_cargo ? 1 : 0));
		vals.put( COLUMN_NAME_PRELOAD_HATCH, String.valueOf(preload_hatch ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_BONUS, String.valueOf(sandstorm_bonus ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_HATCH_SHIP_FRONT, String.valueOf(sandstorm_hatch_ship_front ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_HATCH_SHIP_SIDE, String.valueOf(sandstorm_hatch_ship_side ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_HATCH_ROCKET_1, String.valueOf(sandstorm_hatch_rocket_1 ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_HATCH_ROCKET_2, String.valueOf(sandstorm_hatch_rocket_2 ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_HATCH_ROCKET_3, String.valueOf(sandstorm_hatch_rocket_3 ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_CARGO_SHIP, String.valueOf(sandstorm_cargo_ship ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_CARGO_ROCKET_1, String.valueOf(sandstorm_cargo_rocket_1 ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_CARGO_ROCKET_2, String.valueOf(sandstorm_cargo_rocket_2 ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_CARGO_ROCKET_3, String.valueOf(sandstorm_cargo_rocket_3 ? 1 : 0));
		vals.put( COLUMN_NAME_SANDSTORM_HATCH_COUNT, String.valueOf(sandstorm_hatch_count));
		vals.put( COLUMN_NAME_SANDSTORM_CARGO_COUNT, String.valueOf(sandstorm_cargo_count));
		vals.put( COLUMN_NAME_HATCH_1, String.valueOf(hatch_1 ? 1 : 0));
		vals.put( COLUMN_NAME_HATCH_2, String.valueOf(hatch_2 ? 1 : 0));
		vals.put( COLUMN_NAME_HATCH_3, String.valueOf(hatch_3 ? 1 : 0));
		vals.put( COLUMN_NAME_CARGO_1, String.valueOf(cargo_1 ? 1 : 0));
		vals.put( COLUMN_NAME_CARGO_2, String.valueOf(cargo_2 ? 1 : 0));
		vals.put( COLUMN_NAME_CARGO_3, String.valueOf(cargo_3 ? 1 : 0));
		vals.put( COLUMN_NAME_HAB_CLIMB_2, String.valueOf(hab_climb_2 ? 1 : 0));
		vals.put( COLUMN_NAME_HAB_CLIMB_3, String.valueOf(hab_climb_3 ? 1 : 0));
		vals.put( COLUMN_NAME_HAB_CLIMB_SPEED_LVL_2_SEC, String.valueOf(hab_climb_speed_lvl_2_sec));
		vals.put( COLUMN_NAME_HAB_CLIMB_SPEED_LVL_3_SEC, String.valueOf(hab_climb_speed_lvl_3_sec));
		vals.put( COLUMN_NAME_FLOOR_PICKUP_HATCH, String.valueOf(floor_pickup_hatch ? 1 : 0));
		vals.put( COLUMN_NAME_FLOOR_PICKUP_CARGO, String.valueOf(floor_pickup_cargo ? 1 : 0));
		vals.put( COLUMN_NAME_MAX_ROBOT_SPEED_FTS, String.valueOf(max_robot_speed_fts));
		vals.put( COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS, String.valueOf(robot_gross_weight_lbs));
		vals.put( COLUMN_NAME_CONFIG_ID, config_id);
		vals.put( COLUMN_NAME_WHEEL_BASE_ID, wheel_base_id);
		vals.put( COLUMN_NAME_WHEEL_TYPE_ID, wheel_type_id);
		vals.put( COLUMN_NAME_NOTES, notes);
		return vals;
	}

}