/*
-----------------------------------------------------
StatsStructGen.py 1.1

This file was autogenerated with run cmd:
  "gen_scripts/StatsStructGen.py --packagename=org.frc836.database --classname=PitStats --tablename=scout_pit_data_2019 --infile=FRC_Scouting_Server/scouting.sql --outfile=app/src/main/java/org/frc836/database/PitStats.java"

python version info:
  3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20:52) [MSC v.1916 32 bit (Intel)]

Please take heed of modifying unnecessarily
-----------------------------------------------------
*/

package org.frc836.database;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import org.frc836.database.FRCScoutingContract.SCOUT_PIT_DATA_2019_Entry;
import org.json.JSONException;
import org.json.JSONObject;
import java.util.Date;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

public class PitStats {


	public int team_id;
	public boolean auto_move;
	public boolean auto_score_low;
	public boolean auto_score_outer;
	public boolean auto_score_inner;
	public boolean score_low;
	public boolean score_outer;
	public boolean score_inner;
	public boolean position_control;
	public boolean rotation_control;
	public boolean generator_hang;
	public int max_robot_speed_fts;
	public int robot_gross_weight_lbs;
	public String config_id;
	public String wheel_base_id;
	public String wheel_type_id;
	public String notes;
	

	public static final String TABLE_NAME = SCOUT_PIT_DATA_2019_Entry.TABLE_NAME;
	public static final String COLUMN_NAME_ID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_ID;
	public static final String COLUMN_NAME_TEAM_ID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_TEAM_ID;
	public static final String COLUMN_NAME_AUTO_MOVE = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_AUTO_MOVE;
	public static final String COLUMN_NAME_AUTO_SCORE_LOW = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_AUTO_SCORE_LOW;
	public static final String COLUMN_NAME_AUTO_SCORE_OUTER = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_AUTO_SCORE_OUTER;
	public static final String COLUMN_NAME_AUTO_SCORE_INNER = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_AUTO_SCORE_INNER;
	public static final String COLUMN_NAME_SCORE_LOW = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SCORE_LOW;
	public static final String COLUMN_NAME_SCORE_OUTER = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SCORE_OUTER;
	public static final String COLUMN_NAME_SCORE_INNER = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_SCORE_INNER;
	public static final String COLUMN_NAME_POSITION_CONTROL = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_POSITION_CONTROL;
	public static final String COLUMN_NAME_ROTATION_CONTROL = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_ROTATION_CONTROL;
	public static final String COLUMN_NAME_GENERATOR_HANG = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_GENERATOR_HANG;
	public static final String COLUMN_NAME_MAX_ROBOT_SPEED_FTS = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_MAX_ROBOT_SPEED_FTS;
	public static final String COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS;
	public static final String COLUMN_NAME_CONFIG_ID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_CONFIG_ID;
	public static final String COLUMN_NAME_WHEEL_BASE_ID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_WHEEL_BASE_ID;
	public static final String COLUMN_NAME_WHEEL_TYPE_ID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_WHEEL_TYPE_ID;
	public static final String COLUMN_NAME_NOTES = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_NOTES;
	public static final String COLUMN_NAME_INVALID = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_INVALID;
	public static final String COLUMN_NAME_TIMESTAMP = SCOUT_PIT_DATA_2019_Entry.COLUMN_NAME_TIMESTAMP;
	

	public PitStats() {
		init();
	}
	
	public void init() {
		team_id = 0;
		auto_move = false;
		auto_score_low = false;
		auto_score_outer = false;
		auto_score_inner = false;
		score_low = false;
		score_outer = false;
		score_inner = false;
		position_control = false;
		rotation_control = false;
		generator_hang = false;
		max_robot_speed_fts = 0;
		robot_gross_weight_lbs = 0;
		config_id = "other";
		wheel_base_id = "other";
		wheel_type_id = "other";
		notes = "";
	}
	

	public ContentValues getValues(DB db, SQLiteDatabase database) {
		ContentValues vals = new ContentValues();
		vals.put(COLUMN_NAME_ID, team_id * team_id);
		vals.put(COLUMN_NAME_TEAM_ID, team_id);
		vals.put(COLUMN_NAME_AUTO_MOVE, auto_move ? 1 : 0);
		vals.put(COLUMN_NAME_AUTO_SCORE_LOW, auto_score_low ? 1 : 0);
		vals.put(COLUMN_NAME_AUTO_SCORE_OUTER, auto_score_outer ? 1 : 0);
		vals.put(COLUMN_NAME_AUTO_SCORE_INNER, auto_score_inner ? 1 : 0);
		vals.put(COLUMN_NAME_SCORE_LOW, score_low ? 1 : 0);
		vals.put(COLUMN_NAME_SCORE_OUTER, score_outer ? 1 : 0);
		vals.put(COLUMN_NAME_SCORE_INNER, score_inner ? 1 : 0);
		vals.put(COLUMN_NAME_POSITION_CONTROL, db.getPosIDFromName(position_control, database));
		vals.put(COLUMN_NAME_ROTATION_CONTROL, rotation_control ? 1 : 0);
		vals.put(COLUMN_NAME_GENERATOR_HANG, generator_hang ? 1 : 0);
		vals.put(COLUMN_NAME_MAX_ROBOT_SPEED_FTS, max_robot_speed_fts);
		vals.put(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS, robot_gross_weight_lbs);
		vals.put(COLUMN_NAME_CONFIG_ID, db.getConfigIDFromName(config_id, database));
		vals.put(COLUMN_NAME_WHEEL_BASE_ID, db.getWheelBaseIDFromName(wheel_base_id, database));
		vals.put(COLUMN_NAME_WHEEL_TYPE_ID, db.getWheelTypeIDFromName(wheel_type_id, database));
		vals.put(COLUMN_NAME_NOTES, notes);
		vals.put(COLUMN_NAME_INVALID, 1);
	
		return vals;
	}

	public void fromCursor(Cursor c, DB db, SQLiteDatabase database) {
		fromCursor(c, db, database, 0);
	}
	
	public void fromCursor(Cursor c, DB db, SQLiteDatabase database, int pos) {
		c.moveToPosition(pos);
		team_id = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_TEAM_ID));
		auto_move = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_MOVE)) != 0;
		auto_score_low = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_SCORE_LOW)) != 0;
		auto_score_outer = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_SCORE_OUTER)) != 0;
		auto_score_inner = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_AUTO_SCORE_INNER)) != 0;
		score_low = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SCORE_LOW)) != 0;
		score_outer = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SCORE_OUTER)) != 0;
		score_inner = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_SCORE_INNER)) != 0;
		position_control = DB.getPosNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_POSITION_CONTROL)), database);
		rotation_control = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_ROTATION_CONTROL)) != 0;
		generator_hang = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_GENERATOR_HANG)) != 0;
		max_robot_speed_fts = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_MAX_ROBOT_SPEED_FTS));
		robot_gross_weight_lbs = c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS));
		config_id = DB.getConfigNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_CONFIG_ID)), database);
		wheel_base_id = DB.getWheelBaseNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_WHEEL_BASE_ID)), database);
		wheel_type_id = DB.getWheelTypeNameFromID(c.getInt(c.getColumnIndexOrThrow(COLUMN_NAME_WHEEL_TYPE_ID)), database);
		notes = c.getString(c.getColumnIndexOrThrow(COLUMN_NAME_NOTES));
	}

	public String[] getProjection() {
		List<String> temp = new ArrayList<String>(17);
		temp.add(COLUMN_NAME_TEAM_ID);
		temp.add(COLUMN_NAME_AUTO_MOVE);
		temp.add(COLUMN_NAME_AUTO_SCORE_LOW);
		temp.add(COLUMN_NAME_AUTO_SCORE_OUTER);
		temp.add(COLUMN_NAME_AUTO_SCORE_INNER);
		temp.add(COLUMN_NAME_SCORE_LOW);
		temp.add(COLUMN_NAME_SCORE_OUTER);
		temp.add(COLUMN_NAME_SCORE_INNER);
		temp.add(COLUMN_NAME_POSITION_CONTROL);
		temp.add(COLUMN_NAME_ROTATION_CONTROL);
		temp.add(COLUMN_NAME_GENERATOR_HANG);
		temp.add(COLUMN_NAME_MAX_ROBOT_SPEED_FTS);
		temp.add(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS);
		temp.add(COLUMN_NAME_CONFIG_ID);
		temp.add(COLUMN_NAME_WHEEL_BASE_ID);
		temp.add(COLUMN_NAME_WHEEL_TYPE_ID);
		temp.add(COLUMN_NAME_NOTES);
		String[] projection = new String[temp.size()];
		return temp.toArray(projection);
	}

	public boolean isTextField(String column_name) {
		if (COLUMN_NAME_NOTES.equalsIgnoreCase(column_name)) return true;
	
		return false;
	}

	public boolean needsConvertedToText(String column_name) {
		if (COLUMN_NAME_POSITION_CONTROL.equalsIgnoreCase(column_name)) return true;
	
		if (COLUMN_NAME_CONFIG_ID.equalsIgnoreCase(column_name)) return true;
	
		if (COLUMN_NAME_WHEEL_BASE_ID.equalsIgnoreCase(column_name)) return true;
	
		if (COLUMN_NAME_WHEEL_TYPE_ID.equalsIgnoreCase(column_name)) return true;
	
		return false;
	}

	public ContentValues jsonToCV(JSONObject json) throws JSONException {
		ContentValues vals = new ContentValues();
		vals.put(COLUMN_NAME_ID, json.has(COLUMN_NAME_ID) ? json.getInt(COLUMN_NAME_ID) : 0);
		vals.put(COLUMN_NAME_TEAM_ID, json.has(COLUMN_NAME_TEAM_ID) ? json.getInt(COLUMN_NAME_TEAM_ID) : 0);
		vals.put(COLUMN_NAME_AUTO_MOVE, json.has(COLUMN_NAME_AUTO_MOVE) ? json.getInt(COLUMN_NAME_AUTO_MOVE) : 0);
		vals.put(COLUMN_NAME_AUTO_SCORE_LOW, json.has(COLUMN_NAME_AUTO_SCORE_LOW) ? json.getInt(COLUMN_NAME_AUTO_SCORE_LOW) : 0);
		vals.put(COLUMN_NAME_AUTO_SCORE_OUTER, json.has(COLUMN_NAME_AUTO_SCORE_OUTER) ? json.getInt(COLUMN_NAME_AUTO_SCORE_OUTER) : 0);
		vals.put(COLUMN_NAME_AUTO_SCORE_INNER, json.has(COLUMN_NAME_AUTO_SCORE_INNER) ? json.getInt(COLUMN_NAME_AUTO_SCORE_INNER) : 0);
		vals.put(COLUMN_NAME_SCORE_LOW, json.has(COLUMN_NAME_SCORE_LOW) ? json.getInt(COLUMN_NAME_SCORE_LOW) : 0);
		vals.put(COLUMN_NAME_SCORE_OUTER, json.has(COLUMN_NAME_SCORE_OUTER) ? json.getInt(COLUMN_NAME_SCORE_OUTER) : 0);
		vals.put(COLUMN_NAME_SCORE_INNER, json.has(COLUMN_NAME_SCORE_INNER) ? json.getInt(COLUMN_NAME_SCORE_INNER) : 0);
		vals.put(COLUMN_NAME_POSITION_CONTROL, json.has(COLUMN_NAME_POSITION_CONTROL) ? json.getInt(COLUMN_NAME_POSITION_CONTROL) : 0);
		vals.put(COLUMN_NAME_ROTATION_CONTROL, json.has(COLUMN_NAME_ROTATION_CONTROL) ? json.getInt(COLUMN_NAME_ROTATION_CONTROL) : 0);
		vals.put(COLUMN_NAME_GENERATOR_HANG, json.has(COLUMN_NAME_GENERATOR_HANG) ? json.getInt(COLUMN_NAME_GENERATOR_HANG) : 0);
		vals.put(COLUMN_NAME_MAX_ROBOT_SPEED_FTS, json.has(COLUMN_NAME_MAX_ROBOT_SPEED_FTS) ? json.getInt(COLUMN_NAME_MAX_ROBOT_SPEED_FTS) : 0);
		vals.put(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS, json.has(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS) ? json.getInt(COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS) : 0);
		vals.put(COLUMN_NAME_CONFIG_ID, json.has(COLUMN_NAME_CONFIG_ID) ? json.getInt(COLUMN_NAME_CONFIG_ID) : 0);
		vals.put(COLUMN_NAME_WHEEL_BASE_ID, json.has(COLUMN_NAME_WHEEL_BASE_ID) ? json.getInt(COLUMN_NAME_WHEEL_BASE_ID) : 0);
		vals.put(COLUMN_NAME_WHEEL_TYPE_ID, json.has(COLUMN_NAME_WHEEL_TYPE_ID) ? json.getInt(COLUMN_NAME_WHEEL_TYPE_ID) : 0);
		vals.put(COLUMN_NAME_NOTES, json.has(COLUMN_NAME_NOTES) ? json.getString(COLUMN_NAME_NOTES) : "");
		vals.put(COLUMN_NAME_INVALID, 0);
		vals.put(COLUMN_NAME_TIMESTAMP, DB.dateParser.format(new Date(json.getLong(COLUMN_NAME_TIMESTAMP) * 1000)));
		return vals;
	}

	public LinkedHashMap<String,String> getDisplayData() {
		LinkedHashMap<String,String> vals = new LinkedHashMap<String,String>();
		vals.put( COLUMN_NAME_TEAM_ID, String.valueOf(team_id));
		vals.put( COLUMN_NAME_AUTO_MOVE, String.valueOf(auto_move ? 1 : 0));
		vals.put( COLUMN_NAME_AUTO_SCORE_LOW, String.valueOf(auto_score_low ? 1 : 0));
		vals.put( COLUMN_NAME_AUTO_SCORE_OUTER, String.valueOf(auto_score_outer ? 1 : 0));
		vals.put( COLUMN_NAME_AUTO_SCORE_INNER, String.valueOf(auto_score_inner ? 1 : 0));
		vals.put( COLUMN_NAME_SCORE_LOW, String.valueOf(score_low ? 1 : 0));
		vals.put( COLUMN_NAME_SCORE_OUTER, String.valueOf(score_outer ? 1 : 0));
		vals.put( COLUMN_NAME_SCORE_INNER, String.valueOf(score_inner ? 1 : 0));
		vals.put( COLUMN_NAME_POSITION_CONTROL, String.valueOf(position_control ? 1 : 0));
		vals.put( COLUMN_NAME_ROTATION_CONTROL, String.valueOf(rotation_control ? 1 : 0));
		vals.put( COLUMN_NAME_GENERATOR_HANG, String.valueOf(generator_hang ? 1 : 0));
		vals.put( COLUMN_NAME_MAX_ROBOT_SPEED_FTS, String.valueOf(max_robot_speed_fts));
		vals.put( COLUMN_NAME_ROBOT_GROSS_WEIGHT_LBS, String.valueOf(robot_gross_weight_lbs));
		vals.put( COLUMN_NAME_CONFIG_ID, config_id);
		vals.put( COLUMN_NAME_WHEEL_BASE_ID, wheel_base_id);
		vals.put( COLUMN_NAME_WHEEL_TYPE_ID, wheel_type_id);
		vals.put( COLUMN_NAME_NOTES, notes);
		return vals;
	}

}